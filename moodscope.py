# -*- coding: utf-8 -*-
"""Moodscope.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BFiimxJOeq2CBYSAdEIjQ13YW-ssc8fI
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/House Prices dataset 01.xlsx'
df = pd.read_excel(file_path, sheet_name='House Prices dataset')

# Prepare the features (X) and target (y)
X = df[['Area (sq ft)', 'Bedrooms', 'Age (years)']]
y = df['Price ($)']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Print the training and testing datasets
print("Training Data:")
print(pd.concat([X_train, y_train], axis=1))
print("\nTesting Data:")
print(pd.concat([X_test, y_test], axis=1))

# Model Development: Train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict house prices on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
if len(y_test) > 1:
    r2 = r2_score(y_test, y_pred)
else:
    r2 = None

# Print evaluation metrics
print("Mean Squared Error (MSE):", mse)
if r2 is not None:
    print("R-squared (R^2) Score:", r2)
else:
    print("R-squared (R^2) Score: Cannot be calculated with less than two samples.")

# Plot the predicted prices vs actual prices
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.7, color='b')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', linewidth=2)
plt.xlabel('Actual Prices ($)')
plt.ylabel('Predicted Prices ($)')
plt.title('Actual Prices vs Predicted Prices')
plt.grid()
plt.show()

